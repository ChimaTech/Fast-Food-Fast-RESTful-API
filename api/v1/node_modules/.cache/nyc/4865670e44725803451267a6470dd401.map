{"version":3,"sources":["app-controls.js"],"names":["AppController","req","res","status","send","success","message","users","usersDB","body","email","password","userEmail","userPassword","newSession","token","toUpperCase","sessionsDB","push","name","newUser","id","orders","ordersDB","map","order","params","foodsList","total","foodsArray","split","newOrder","toString","foods","Number","orderFound","statusValue","toLowerCase","appController"],"mappings":"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","file":"app-controls.js","sourceRoot":"C:/Users/Chibueze Chima/Desktop/Dcoder/Andela--Udacity/Andela/Andela-Tests/#Pre-Boot-Camp-Challenges/Fast-Food-Fast-RESTful-API/api/v1/appControllers","sourcesContent":["import usersDB from '../db/users-db'; // Imports Users dataBase module\r\nimport ordersDB from '../db/orders-db'; // Imports orders dataBase module\r\nimport sessionsDB from '../db/sessions-db'; // Imports sessions dataBase module\r\nimport encodeStr from './encodeStr'; // Imports `encodeStr` function\r\nimport searchUser from './searchUser'; // Imports `searchUser` function\r\n\r\n\r\n/*\r\nNOTE: A Main Class of the App Controls ... BEGINS\r\n*/\r\nclass AppController {\r\n  constructor(req, res) {\r\n    this.req = req;\r\n    this.res = res;\r\n  }\r\n  // HTTP methods (i.e. the endpoints) section ...begins\r\n\r\n\r\n  // GET: get all users <endpoint: 1>\r\n  getAllUsers(req, res) {\r\n    return res.status(200).send({\r\n      success: 'true',\r\n      message: 'Users retrieved successfully',\r\n      users: usersDB,\r\n    });\r\n\r\n  } // </endpoint: 1>\r\n\r\n  // POST: SIGN IN a User using the email and password <endpoint: 2>\r\n  signInUser(req, res) {\r\n    if (!req.body.email && !req.body.password) { // Checks whether email & password are supplied\r\n      return res.status(400).send({\r\n        success: 'false',\r\n        message: 'Email and Password are required',\r\n      });\r\n\r\n    }\r\n    if (!req.body.email && req.body.password) { // Chechs whether an email is supplied\r\n      return res.status(400).send({\r\n        success: 'false',\r\n        message: 'Email is required',\r\n      });\r\n\r\n    }\r\n    if (req.body.email && !req.body.password) { // Chechs whether password is supplied\r\n      return res.status(400).send({\r\n        success: 'false',\r\n        message: 'Password is required',\r\n      });\r\n\r\n    }\r\n    if (req.body.email && req.body.password) { // What to do when email and password are supplied\r\n\r\n      let userEmail = req.body.email;\r\n      let userPassword = req.body.password;\r\n\r\n      if ( searchUser( userEmail, userPassword, usersDB ) === true ) {\r\n        // Declare && Define an `object` variable to hold the session's entry in the sessionsDB\r\n        const newSession = {\r\n          token: `${encodeStr(req.body.email.toUpperCase())}${encodeStr(req.body.password)}`, // Set a token for the new User\r\n          email: req.body.email,\r\n        };\r\n        // Push the new session entry now called ` newSession` into the dataBase\r\n        sessionsDB.push(newSession);\r\n\r\n        return res.status(201).send({ // return success code: 201 && send the following responses:\r\n          success: 'true',\r\n          message: 'New user sign-in is successful',\r\n          newSession\r\n        });\r\n\r\n      }\r\n      else if ( searchUser( userEmail, userPassword, usersDB ) === false ) {\r\n        return res.status(401).send({\r\n          success: 'false',\r\n          message: 'Incorrect email or password'\r\n        });\r\n      }\r\n\r\n    }\r\n  } // </endpoint: 2>\r\n\r\n\r\n  // POST: post an entry to the dataBase (i.e. SIGN UP a user) <endpoint: 3>\r\n  signUpUser(req, res) {\r\n    if (!req.body.name && !req.body.email && !req.body.password) { // Checks whether Name, email and password are supplied\r\n      return res.status(400).send({\r\n        success: 'false',\r\n        message: 'Name, Email and Password are required',\r\n      });\r\n\r\n    }\r\n    if (!req.body.name && !req.body.email && req.body.password) { // Chechs whether Name and email are supplied\r\n      return res.status(400).send({\r\n        success: 'false',\r\n        message: 'Name and Email are required',\r\n      });\r\n\r\n    }\r\n    if (!req.body.name && req.body.email && req.body.password) { // Chechs whether Name is supplied\r\n      return res.status(400).send({\r\n        success: 'false',\r\n        message: 'Name is required',\r\n      });\r\n\r\n    }\r\n    if (req.body.name && !req.body.email && !req.body.password) { // Chechs whether Email and Password are supplied\r\n      return res.status(400).send({\r\n        success: 'false',\r\n        message: 'Email and Password are required',\r\n      });\r\n\r\n    }\r\n    if (req.body.name && req.body.email && !req.body.password) { // Chechs whether Password is supplied\r\n      return res.status(400).send({\r\n        success: 'false',\r\n        message: 'Password is required',\r\n      });\r\n\r\n    }\r\n    if (req.body.name && !req.body.email && req.body.password) { // Chechs whether Email is supplied\r\n      return res.status(400).send({\r\n        success: 'false',\r\n        message: 'Email is required',\r\n      });\r\n\r\n    }\r\n    if (!req.body.name && req.body.email && !req.body.password) { // Chechs whether Name and Password are supplied\r\n      return res.status(400).send({\r\n        success: 'false',\r\n        message: 'Name and Password are required',\r\n      });\r\n\r\n    }\r\n    if (req.body.name && req.body.email && req.body.password) { // What to do when Name, email and password are supplied\r\n      // Declare & Define an `object` variable that will hold the `request` entry when it is successfully submitted\r\n      const newUser = {\r\n        id: `${encodeStr(req.body.email.toUpperCase())}${encodeStr(req.body.password)}`, // Sets the entry's ID (i.e the user's ID) in the dataBase\r\n        name: req.body.name,\r\n        email: req.body.email,\r\n        password: req.body.password,\r\n      };\r\n\r\n      // Declare && Define an `object` variable to hold the session's entry in the sessionsDB\r\n      const newSession = {\r\n        token: `${encodeStr(req.body.email.toUpperCase())}${encodeStr(req.body.password)}`, // Set a token for the new User\r\n        email: req.body.email,\r\n      };\r\n\r\n\r\n      usersDB.push(newUser); // Push the new user entry now called ` newUser` into the dataBase\r\n      sessionsDB.push(newSession); // Push the new session entry now called ` newSession` into the dataBase\r\n\r\n      return res.status(201).send({ // return success code: 201 && send the following responses:\r\n        success: 'true',\r\n        message: 'New user signup is successful',\r\n        newUser,\r\n        newSession,\r\n      });\r\n\r\n    }\r\n  } // </endpoint: 3>\r\n\r\n  // GET: get all All Orders <endpoint: 4>\r\n  getAllOrders(req, res) {\r\n    res.status(200).send({\r\n      success: 'true',\r\n      message: 'All orders retrieved successfully',\r\n      orders: ordersDB,\r\n    });\r\n  } // </endpoint: 4>\r\n\r\n\r\n  // GET: get a single order using the object's ID attribute (i.e the order's ID) <endpoint: 5>\r\n  getOrder(req, res) {\r\n    // Search for the order using the supplied ID\r\n    ordersDB.map((order) => {\r\n      if (order.id === req.params.id) {\r\n        return res.status(200).send({\r\n          success: 'true',\r\n          message: 'Order retrieved successfully',\r\n          order,\r\n        });\r\n\r\n      }\r\n    });\r\n    return res.status(404).send({\r\n      success: 'false',\r\n      message: `An order with the ID ${req.params.id} does not exist`,\r\n    });\r\n\r\n  } // </endpoint: 5>\r\n\r\n\r\n  // POST: post an entry to the orders dataBase (i.e. place a new order) <endpoint: 6>\r\n  placeOrder(req, res) {\r\n    if (!req.body.foodsList && !req.body.total) { // Checks whether List of foods; and Total cost are supplied\r\n      return res.status(400).send({\r\n        success: 'false',\r\n        message: 'List of foods; and Total cost are required',\r\n      });\r\n\r\n    }\r\n    if (!req.body.foodsList && req.body.total) { // Chechs whether List of foods are supplied\r\n      return res.status(400).send({\r\n        success: 'false',\r\n        message: 'List of foods are required',\r\n      });\r\n\r\n    }\r\n    if (req.body.foodsList && !req.body.total) { // Chechs whether total cost supplied\r\n      return res.status(400).send({\r\n        success: 'false',\r\n        message: 'Total cost of foods is required',\r\n      });\r\n\r\n    }\r\n    if (req.body.foodsList && req.body.total) { // List of foods; and Total cost are supplied\r\n      const foodsList = req.body.foodsList;\r\n\r\n      const foodsArray = foodsList.split(',');\r\n\r\n      // Declare & Define an order `object` variable that will hold the `request` entry when it is successfully submitted\r\n      const newOrder = {\r\n        id: `${encodeStr(foodsList.toUpperCase())}${encodeStr(req.body.total.toString())}`, // Sets the entry's ID (i.e the order's ID) in the dataBase\r\n        foods: foodsArray,\r\n        total: Number(req.body.total),\r\n        status: 'incoming',\r\n      };\r\n\r\n      // Push the entry now called ` newOrder` into the dataBase\r\n      ordersDB.push(newOrder);\r\n      return res.status(201).send({ // return success code: 201 && send the following responses:\r\n        success: 'true',\r\n        message: 'New order placement is successful',\r\n        newOrder,\r\n      });\r\n\r\n    }\r\n  } // </endpoint: 6>\r\n\r\n\r\n  // PUT: Update an entry in the dataBase (i.e Update the status of an order) <endpoint: 7>\r\n  updateOrderStatus(req, res) {\r\n    let orderFound;\r\n\r\n    // Iterate through the array of `objects` to find the one with matched ID attribute\r\n    ordersDB.map((order) => {\r\n      if (order.id === req.params.id) { // When a match is found for the order ID\r\n        orderFound = order;\r\n\r\n        if (!req.body.status) { // What to do if the request body does not have a status attribute\r\n          return res.status(400).send({\r\n            success: 'false',\r\n            message: 'Status is required',\r\n          });\r\n        }\r\n        if (req.body.status) { // What to do when the request body has a status attribute\r\n          const status = req.body.status;\r\n          const statusValue = status.toLowerCase();\r\n\r\n          // Ensure that the valid status is entered in the request\r\n          if (statusValue === 'accepted' || statusValue === 'completed' || statusValue === 'declined') {\r\n            orderFound.status = statusValue;\r\n\r\n            if (statusValue === 'accepted') {\r\n              return res.status(201).send({ // HTTP status code ~201~ is used instead of ~204~ because the updated order is to be dispalyed to the user\r\n                success: 'true',\r\n                message: 'Order has been accepted successfully',\r\n                orderFound,\r\n              });\r\n            }\r\n            else if (statusValue === 'completed') {\r\n              return res.status(201).send({ // HTTP status code ~201~ is used instead of ~204~ because the updated order is to be dispalyed to the user\r\n                success: 'true',\r\n                message: 'Order has been completed successfully',\r\n                orderFound,\r\n              });\r\n            }\r\n            else if (statusValue === 'declined') {\r\n              return res.status(201).send({ // HTTP status code ~201~ is used instead of ~204~ because the updated order is to be dispalyed to the user\r\n                success: 'true',\r\n                message: 'Order has been declined successfully',\r\n                orderFound,\r\n              });\r\n            }\r\n\r\n          }\r\n\r\n          return res.status(400).send({\r\n            success: 'false',\r\n            message: 'Invalid status entered, check the spelling',\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    if (!orderFound) { // What to do if order's entry is not found\r\n      return res.status(404).send({ // Sends fail message\r\n        success: 'false',\r\n        message: 'Order not found',\r\n      });\r\n    }\r\n\r\n  } // </endpoint: 7>\r\n\r\n  // HTTP methods section ...ends\r\n}\r\n/* A Main Class of the App Controls ... ENDS */\r\n\r\n\r\n// Create an Instance of the AppController class and export that new Instance\r\nconst appController = new AppController();\r\nexport default appController;\r\n"]}